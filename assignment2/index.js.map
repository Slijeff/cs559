{
  "version": 3,
  "sources": ["src/utils.ts", "src/index.ts"],
  "sourcesContent": ["import { canvas2d, position } from \"./types\";\r\n\r\nexport function getCursorPosition(\r\n  canvas: HTMLCanvasElement,\r\n  event: MouseEvent\r\n): position {\r\n  const rect = canvas.getBoundingClientRect();\r\n  const x = event.clientX - rect.left;\r\n  const y = event.clientY - rect.top;\r\n  return { x, y };\r\n}\r\n\r\nexport function getCursorPositionRelative(\r\n  canvas: HTMLCanvasElement,\r\n  ctx: CanvasRenderingContext2D,\r\n  event: MouseEvent\r\n): position {\r\n  let loc = getCursorPosition(canvas, event);\r\n  let mat = ctx.getTransform();\r\n  let imat = mat.invertSelf();\r\n  let x = loc.x * imat.a + loc.y * imat.c + imat.e;\r\n  let y = loc.x * imat.b + loc.y * imat.d + imat.f;\r\n  return { x, y };\r\n}\r\n\r\nexport function drawBezier(\r\n  ctx: CanvasRenderingContext2D,\r\n  sx,\r\n  sy,\r\n  cp1x,\r\n  cp1y,\r\n  ex,\r\n  ey,\r\n  cp2x,\r\n  cp2y\r\n): void {\r\n  ctx.moveTo(sx, sy);\r\n  ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ex, ey);\r\n}\r\n\r\nexport function getCanvas(): canvas2d {\r\n  let canvas = document.getElementById(\"myCanvas\") as HTMLCanvasElement;\r\n  let ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n  return { canvas, ctx };\r\n}\r\n\r\nexport function drawAxis(ctx: CanvasRenderingContext2D) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, 0);\r\n  ctx.lineTo(200, 0);\r\n  ctx.lineTo(90, -5);\r\n  ctx.lineWidth = 3;\r\n  ctx.strokeStyle = \"red\";\r\n  ctx.stroke();\r\n\r\n  ctx.strokeStyle = \"blue\";\r\n  ctx.lineWidth = 1;\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, 0);\r\n  ctx.lineTo(0, 200);\r\n  ctx.lineTo(-5, 90);\r\n  ctx.stroke();\r\n\r\n  ctx.strokeStyle = \"black\";\r\n}\r\n", "import { drawBezier, getCanvas, getCursorPositionRelative } from \"./utils\";\r\n\r\nconst { canvas, ctx } = getCanvas();\r\nconst xmid = canvas.width / 2;\r\nconst ymid = canvas.height / 2;\r\nconst PI = Math.PI;\r\nlet isDragging = false;\r\nlet isHolding = false;\r\nlet relx = 0;\r\nlet rely = 0;\r\nlet moveByDeg = 1;\r\nlet speed = 0.4;\r\nlet acc = 0.02;\r\n\r\nconst drawCenter = (x: number = 0, y: number = 0) => {\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, 30, 0, 2 * PI);\r\n  ctx.lineWidth = 5;\r\n  ctx.stroke();\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, 18, 0, 2 * PI);\r\n  ctx.fill();\r\n};\r\n\r\nconst drawBase = () => {\r\n  let width = 40;\r\n  ctx.beginPath();\r\n\r\n  ctx.moveTo(-width / 2, 0);\r\n  ctx.lineTo(-width / 2, 70);\r\n  ctx.moveTo(width / 2, 0);\r\n  ctx.lineTo(width / 2, 70);\r\n\r\n  ctx.lineTo(width / 2 + 40, 70);\r\n  ctx.lineTo(width / 2 + 40, 100);\r\n  ctx.lineTo(-width / 2 - 40, 100);\r\n  ctx.lineTo(-width / 2 - 40, 70);\r\n  ctx.lineTo(-width / 2, 70);\r\n\r\n  ctx.moveTo(-width / 2, 0);\r\n  ctx.lineTo(width / 2, 0);\r\n  ctx.lineWidth = 3;\r\n  ctx.stroke();\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(0, -100, 100, 0, 2 * PI);\r\n  ctx.lineWidth = 18;\r\n  ctx.stroke();\r\n  ctx.lineWidth = 0.1;\r\n};\r\n\r\nconst drawFanBlade = () => {\r\n  ctx.beginPath();\r\n  drawBezier(\r\n    ctx,\r\n    17.5,\r\n    26.203125,\r\n    100.5,\r\n    110.203125,\r\n    -11.5,\r\n    29.203125,\r\n    -87.5,\r\n    113.203125\r\n  );\r\n  ctx.closePath();\r\n  ctx.fillStyle = \"#abdbe3\";\r\n  ctx.fill();\r\n};\r\n\r\nconst drawFan = () => {\r\n  drawBase();\r\n\r\n  ctx.translate(0, -100);\r\n  ctx.rotate((moveByDeg * PI * speed) / 180);\r\n  drawCenter();\r\n  ctx.save();\r\n\r\n  drawFanBlade();\r\n  ctx.rotate((90 * PI) / 180);\r\n  drawFanBlade();\r\n  ctx.rotate((90 * PI) / 180);\r\n  drawFanBlade();\r\n  ctx.rotate((90 * PI) / 180);\r\n  drawFanBlade();\r\n\r\n  ctx.restore();\r\n  ctx.restore();\r\n};\r\n\r\nconst update = () => {\r\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.restore();\r\n\r\n  // draw new image\r\n  ctx.translate(relx, rely);\r\n  ctx.save();\r\n  ctx.save();\r\n  drawFan();\r\n};\r\n\r\nconst animateSlowDown = () => {\r\n  speed *= 1 - acc;\r\n  update();\r\n  if (speed > 0.4 && !isDragging) {\r\n    requestAnimationFrame(animateSlowDown);\r\n  }\r\n};\r\n\r\nconst main = () => {\r\n  canvas.onmousedown = (e: MouseEvent) => {\r\n    isDragging = true;\r\n  };\r\n  canvas.onmouseup = (e: MouseEvent) => {\r\n    isDragging = false;\r\n    let loc = getCursorPositionRelative(canvas, ctx, e);\r\n    relx = loc.x;\r\n    rely = loc.y;\r\n    moveByDeg = -1;\r\n    animateSlowDown();\r\n  };\r\n  canvas.onmousemove = (e: MouseEvent) => {\r\n    if (isDragging) {\r\n      moveByDeg = 1;\r\n      let loc = getCursorPositionRelative(canvas, ctx, e);\r\n      relx = loc.x;\r\n      rely = loc.y;\r\n      speed *= 1 + acc;\r\n      update();\r\n    }\r\n  };\r\n  // original\r\n  ctx.translate(xmid, ymid);\r\n  ctx.save();\r\n  drawFan();\r\n};\r\nmain();\r\n"],
  "mappings": "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",
  "names": ["getCursorPosition", "canvas", "event", "rect", "x", "y", "getCursorPositionRelative", "ctx", "loc", "imat", "drawBezier", "sx", "sy", "cp1x", "cp1y", "ex", "ey", "cp2x", "cp2y", "getCanvas", "canvas", "ctx", "getCanvas", "xmid", "ymid", "PI", "isDragging", "relx", "rely", "moveByDeg", "speed", "acc", "drawCenter", "x", "y", "ctx", "PI", "drawBase", "width", "drawFanBlade", "drawBezier", "drawFan", "update", "canvas", "animateSlowDown", "isDragging", "main", "e", "loc", "getCursorPositionRelative", "xmid", "ymid"]
}
